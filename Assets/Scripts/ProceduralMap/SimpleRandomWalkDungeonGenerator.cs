using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Random = UnityEngine.Random;

public class SimpleRandomWalkDungeonGenerator : AbstractDungeonGenerator
{


    [SerializeField]
    protected SimpleRandomWalkData randomWalkParameters;

    protected override void RunProceduralGeneration()
    {
        // Run the random walk algorithm with the specified parameters and starting position
        HashSet<Vector2Int> floorPositions = RunRandomWalk(randomWalkParameters, startPosition);

        // Clear the existing tilemap before painting new tiles
        tilemapVisualizer.Clear();

        // Paint floor tiles on the tilemap based on the generated floor positions
        tilemapVisualizer.PaintFloorTiles(floorPositions);

        // Generate walls based on the floor positions and paint them on the tilemap
        WallGenerator.CreateWalls(floorPositions, tilemapVisualizer);
    }

    protected HashSet<Vector2Int> RunRandomWalk(SimpleRandomWalkData parameter, Vector2Int position)
    {
        // Initialize the current position to the specified starting position
        var currentPosition = position;

        // Create a HashSet to store the positions of the generated floor tiles
        HashSet<Vector2Int> floorPositions = new HashSet<Vector2Int>();

        // Iterate for the specified number of iterations
        for (int i = 0; i < parameter.iterations; i++)
        {
            // Generate a random walk path based on the current position and parameters
            var path = ProceduralGenerationAlgorithms.SimpleRandomWalk(currentPosition, parameter.walkLength);

            // Add the generated path to the set of floor positions
            floorPositions.UnionWith(path);

            // If specified, randomly select a position from the generated floor positions as the new current position
            if (parameter.startRandomlyEachIteration)
            {
                currentPosition = floorPositions.ElementAt(Random.Range(0, floorPositions.Count));
            }
        }

        // Return the set of floor positions generated by the random walk algorithm
        return floorPositions;
    }


}
